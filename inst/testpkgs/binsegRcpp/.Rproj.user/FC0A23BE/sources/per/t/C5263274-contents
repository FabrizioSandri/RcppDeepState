#ifndef RCPPDEEPSTATE_RCPPDEEPSTATE_H
#define RCPPDEEPSTATE_RCPPDEEPSTATE_H
#include <deepstate/DeepState.hpp>
#include <vector>
#include <iostream>
#include <Rcpp.h>
#include <fstream>

using namespace Rcpp;
int rand_size;
Rcpp::NumericVector Exceptional_values(){
Rcpp::NumericVector values = Rcpp::NumericVector::create(NA_REAL,R_NaN,R_PosInf,R_NegInf);
 return values;
}

int RcppDeepState_int(){
  int val = DeepState_IntInRange(100,1000);
    LOG(INFO)<< "size of array "  << val <<"\n";
 return val;
}

Rcpp::NumericVector RcppDeepState_NumericVector(){
      rand_size = DeepState_IntInRange(1,10);
  //Rcpp::NumericVector v1 = Rcpp::NumericVector::create( 1, NA_REAL, R_NaN, R_PosInf, R_NegInf);
      //Rcpp::NumericVector missing_values = Exceptional_values();
      LOG(INFO)<< "size of numeric vector "  << rand_size <<"\n";
      Rcpp::NumericVector rand_numvec(rand_size);
      for(int i = 0 ; i < rand_size - 1 ;i++){      
        rand_numvec[i] = DeepState_Double();  
        //rand_numvec[i] = deepstate::OneOf(v1);
        //LOG(TRACE) << "One of values" << deepstate::OneOf({20,30});
        }
       for(int i=0; i < rand_size; i++){
        LOG(TRACE) << " index: " <<  i  << " rand_Numeric vector: " << rand_numvec[i] << "\n";
        //myfile << "index: " << i << "rand_numeric vector: " << rand_intvec[i] << "\n";
       }
         return rand_numvec;
    }
Rcpp::IntegerVector RcppDeepState_IntegerVector(){
      int size = 0; //DeepState_IntInRange(0,10);
       LOG(INFO)<< "size of integer vector "  << size <<"\n";
      Rcpp::IntegerVector rand_intvec(size);
      for(int i = 0 ; i < size ;i++){
      rand_intvec[i] = DeepState_IntInRange(0,size-1);
      }
      for(int i=0; i < size; i++){
      LOG(TRACE) << " index: " <<  i  << " rand_Integer vector: " << rand_intvec[i] << "\n";
      //myfile << "index: " << i << "rand_numeric vector: " << rand_intvec[i] << "\n";
      }
     //IntegerVector rand_intvec(1);
     //rand_intvec[0] = rand_size;
   return rand_intvec;
  }

#endif
