get_package_details <- function(path){
  package_path <- Sys.glob(file.path(
    path,"src", "RcppExports.cpp"))
  funs<- nc::capture_all_str(
    package_path,
    "\n\\s*// ",
    commentName=".*",
    "\n",
    prototype=list(
      returnType=".*",
      " ",
      funName=".*?",
      "\\(",
      arguments=".*",
      "\\);"),"\n",
    SEXP=".*\n","\\s*BEGIN_RCPP\\s*\n",
    code="(?:.*\n)*?",
    "\\s*END_RCPP")
}

get_fun_body<-function(package_name){
  funs <- get_package_details(package_name) 
  #print(funs)
  function.list <- funs[,{
    dt <- nc::capture_all_str(
      code,
      "input_parameter< ",
      type=".*?",
      ">::type",
      arg="[^(]+")
  }, by=funName]
  return(function.list)
}

get_prototype_calls <-function(package_name){
  funs <- get_package_details(package_name) 
  codes <- funs[,{nc::capture_all_str(code,"::wrap",calls ="(?:.*)")},by=funName]
  prototypes <-funs[,.(funName,prototype,calls=codes$calls)]
  return(prototypes)
}

create_makefile <-function(package,fun_name){
  package_name <- package
  makefile.name <- gsub("rcpp_","",paste0(fun_name,".Makefile"))
 test_harness <- gsub("rcpp_","",paste0(fun_name,"_DeepState_TestHarness"))
  makefile.name.o <-paste0(test_harness,".o")
  makefile.name.cpp <-paste0(test_harness,".cpp")
  file.create((makefile.name), recursive=TRUE)
  path <-paste("R_HOME=/home/akhila/lib/R")
  write(path,makefile.name,append = TRUE) 
  flags <- paste("COMMON_FLAGS=",makefile.name.o," -I/home/akhila/R/RcppDeepState/inst/include/ -L/usr/lib/R/site-library/RInside/include/lib -Wl,-rpath=/usr/lib/R/site-library/RInside/include/lib -L${R_HOME}/lib -Wl,-rpath=${R_HOME}/lib -L/home/akhila/deepstate/src/lib -Wl,-rpath=/home/akhila/deepstate/src/lib -lR -lRInside -ldeepstate")
  write(flags,makefile.name,append = TRUE)
  write(paste(test_harness,":",makefile.name.o),makefile.name,append = TRUE)
  compile.line <- paste("\t","clang++ -o",test_harness,"${COMMON_FLAGS}")
  obj.file.path <-gsub(" ","",paste(package_name,"/src/*.o"))
  write(paste(compile.line,obj.file.path),makefile.name,append = TRUE)
  write(paste0("\t","./",test_harness," --fuzz"),makefile.name,append = TRUE)
  write(paste(makefile.name.o,":",makefile.name.cpp),makefile.name,append = TRUE)
  write(paste("\t","clang++ -I${R_HOME}/include -I/home/akhila/deepstate/src/include -I/usr/lib/R/site-library/Rcpp/include -I/usr/lib/R/site-library/RInside/include -I/home/akhila/R/RcppDeepState/inst/include/", 
              makefile.name.cpp,"-o",makefile.name.o,"-c"),makefile.name,append = TRUE)
}

deepState_pkg_create<-function(package_name){  
  vals <- get_fun_body(package_name)
  prototypes_calls <-get_prototype_calls(package_name)
  in_package <- paste("RcppDeepState")
  includes <- "#include <deepstate/DeepState.hpp>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <fstream>"
  fun_names <- unique(vals$funName)
  for(f in fun_names){
    rows <- vals[vals$funName == f,]
    pt <- prototypes_calls[prototypes_calls$funName ==f,]
    fun_name <-gsub("rcpp_","",f)
    filename <-gsub(" ","",paste(fun_name,"_DeepState_TestHarness",".cpp"))
    file.create((filename), recursive=TRUE)
    write(includes,filename,append = TRUE)
    write(paste(pt[1,pt$prototype]),filename,append = TRUE)
    testname<-paste(f,"_test",sep="")
    unittest<-gsub(" ","",paste(fun_name,"_randomdatatypes"))
    test <- gsub(" ","",paste("\n","TEST(",unittest,",",testname,")","{","\n"))
    write(test, filename, append =TRUE )
    #obj <-gsub( "\\s+", " " ,paste(in_package,tolower(in_package),";","\n"))
    #write(obj,filename,append = TRUE)
    for(j in 1:nrow(rows)){
      write(paste0("std::ofstream",rows[j,arg],"_stream",";"),filename,append = TRUE)
    }
    write(paste("int argc;","\n","char **argv;","\n","RInside R(argc,argv);"),filename, append =TRUE)
    for(i in 1:nrow(rows)){
      create_makefile(package_name,rows[i,funName]) 
      variable <- gsub( "\\s+", " " ,paste(rows[i,type],rows[i,arg]))
      name <- (gsub("Rcpp::","",rows[i,type]))
      st_val <- gsub(" ","",paste("=","RcppDeepState_",(name),"()",";\n"))
      file_open <- gsub("# ","\"",paste0(rows[i,arg],"_stream.open(#",rows[i,arg],"# );","\n",
                         rows[i,arg],"_stream<<",rows[i,arg],";","\n",
                         rows[i,arg],"_stream.close();","\n"))
      write(paste(variable,st_val,file_open), filename, append =TRUE )
    }
    
    write(paste("try{\n", sub("\\)","",sub("\\(","",pt[1,calls]))), filename, append =TRUE )
    write(gsub("#","\"",paste0("\n","}\n","catch(Rcpp::exception& e){\n","std::cout<<#Exception Handled#<<std::endl;\n}")),filename,append=TRUE)
    write(paste("\n","}"),filename,append=TRUE)
  }
  return ("Testharness created!!") 
}

#deepState_pkg_create("~/R/testASAN")
deep_harness_analyze_one <- function(function_name,binary_file){
    fun_name <-gsub("rcpp_","",function_name)
    output.dir <- paste0(fun_name,"_output/",binary_file)
    analyze_one <- paste0("./",fun_name,"_DeepState_TestHarness"," --input_test_file ",output.dir)
    #print(analyze_one)
    system(analyze_one)
}

#deep_harness_analyze_one("rcpp_binseg_normal","binseg_normal_output\binseg_normal_output259e208cafd4f265647fc87677ea81fa68888152.pass")
library(readr)
deep_harness_compile_run <- function(package_name){
  vals <- get_fun_body(package_name)
  fun_names <- unique(vals$funName)
  for(f in fun_names){
    rows <- vals[vals$funName == f,]
    fun_name <-gsub("rcpp_","",f)
    compile_line <-paste0("rm -f *.o && make -f ",fun_name,".Makefile ",fun_name,"_DeepState_TestHarness")
    system(compile_line)
    log_file<-paste0(fun_name,"_log")
    #saving code to log file
    run_line <- paste0("./",fun_name,"_DeepState_TestHarness"," --fuzz" ," 2> ",log_file)
    print(run_line)
    system(run_line)
    file.content <- read_lines(log_file,skip=3)
    error.msgs <- grep("ERROR",file.content,value=TRUE)
    formatted.error <- gsub(".*ERROR: AddressSanitizer:", "", error.msgs)
    #print(formatted.error)
    return(formatted.error)
  }
} 
#deep_harness_compile_run("~/R/testASAN")

deep_harness_save_passing_tests<-function(package_name){
  vals <- get_fun_body(package_name)
  fun_names <- unique(vals$funName)
  for(f in fun_names){
    rows <- vals[vals$funName == f,]
    fun_name <-gsub("rcpp_","",f)
    output.dir <- paste0(fun_name,"_output")
    dir.create(output.dir)
    print(paste("saving passed testcases in", output.dir))
    filename <-paste0("./",fun_name,"_DeepState_TestHarness"," --fuzz --fuzz_save_passing --output_test_dir ",output.dir)
    system(filename)
  }
}

#deep_harness_save_passing_tests("~/R/binsegRcpp")