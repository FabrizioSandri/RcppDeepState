get_package_details <- function(path){
  cA.dir <- "~/R/"
  dir.create(cA.dir, showWarnings=FALSE)
  setwd(cA.dir)
  package_path <- Sys.glob(file.path(
    path,"src", "RcppExports.cpp"))
  funs<- nc::capture_all_str(
    package_path,
    "\n\\s*// ",
    commentName=".*",
    "\n",
    prototype=list(
      returnType=".*",
      " ",
      funName=".*?",
      "\\(",
      arguments=".*",
      "\\);"),"\n",
    SEXP=".*\n","\\s*BEGIN_RCPP\\s*\n",
    code="(?:.*\n)*?",
    "\\s*END_RCPP")
}

get_listOfParameters <-function(package_name){
  funs <- get_package_details(package_name) 
  function.list <- funs[,{
    dt <- nc::capture_all_str(
      code,
      "input_parameter< const ",
      type=".*?",
      ">::type",
      arg="[^(]+")
  }, by=funName]
  return(function.list)
}
val<-get_listOfParameters("binseg")
val
get_prototype_calls <-function(package_name){
  funs <- get_package_details(package_name) 
  codes <- funs[,{nc::capture_all_str(code,"::wrap",calls ="(?:.*)")},by=funName]
  prototypes <-funs[,.(funName,prototype,calls=codes$calls)]
  return(prototypes)
}
deepState_pkg_create<-function(package_name){  
  listOfParameters <- get_listOfParameters(package_name)
  prototypes_calls <-get_prototype_calls(package_name)
  in_package <- paste("RcppDeepState")
  includes <- "#include <RInside.h>
#include <RcppDeepState.h>
#include <fstream>"
  fun_names <- unique(listOfParameters$funName)
  for(f in fun_names){
    rows <- listOfParameters[listOfParameters$funName == f,]
    pt <- prototypes_calls[prototypes_calls$funName ==f,]
    fun_name <-gsub("rcpp_","",f)
    filename <-gsub(" ","",paste(fun_name,"_DeepState_TestHarness",".cpp"))
    file.create((filename), recursive=TRUE)
    write(includes,filename,append = TRUE)
    write(paste(pt[1,pt$prototype]),filename,append = TRUE)
    testname<-paste(f,"_test",sep="")
    unittest<-gsub(" ","",paste(fun_name,"_randomdatatypes"))
    test <- gsub(" ","",paste("\n","TEST(",unittest,",",testname,")","{"))
    write(test, filename, append =TRUE )
    #obj <-gsub( "\\s+", " " ,paste(in_package,tolower(in_package),";","\n"))
    for(j in 1:nrow(rows)){
    write(paste0("ofstream",rows[j,arg],"_stream",";"))
    }
    write(paste("int argc;","\n","char **argv;","\n","RInside R(argc,argv);"),filename, append =TRUE)
    for(i in 1:nrow(rows)){
      #create_makefile(package_name,rows[i,fun_name]) 
      variable <- gsub( "\\s+", " " ,paste(rows[i,type],rows[i,arg]))
      name <- (gsub("Rcpp::","",rows[i,type]))
      st_val <- gsub(" ","",paste("=","RcppDeepState_",(name),"()",";"))
      file_open <- paste0(rows[i,arg],"_stream(",rows[i,arg],");","\n",rows[i,arg],"_stream <<",rows[i,arg],"<<\n;",file_open,rows[i,arg],".close();\n",)
      write(paste(variable,st_val,file_open), filename, append =TRUE )
    }
    write(paste(sub("\\)","",sub("\\(","",pt[1,calls]))), filename, append =TRUE )
    write(paste("}"),filename,append=TRUE)
  }
return ("Testharness created!!")  
}

deepState_pkg_create("binsegRcpp")

create_makefile <-function(package,fun_name){
package_name <- package
 makefile.name <- gsub(" ","",paste(fun_name,"_DeepState_TestHarness",".Makefile"))
 makefile.name.o <-gsub(" ","",paste(makefile.name,".o"))
 makefile.name.cpp <-gsub(" ","",paste(makefile.name,".cpp"))
 file.create((makefile.name), recursive=TRUE)
  path <-paste("R_HOME=/home/akhila/lib/R")
  write(path,makefile.name,append = TRUE) 
  flags <- paste("COMMON_FLAGS=",makefile.name.o," -I/home/akhila/R/RcppDeepState/inst/include/ -L/usr/lib/R/site-library/RInside/include/lib -Wl,-rpath=/usr/lib/R/site-library/RInside/include/lib -L${R_HOME}/lib -Wl,-rpath=${R_HOME}/lib -L/home/akhila/deepstate/src/lib -Wl,-rpath=/home/akhila/deepstate/src/lib -lR -lRInside -ldeepstate")
  write(flags,makefile.name,append = TRUE)
  write(paste(makefile.name,":",makefile.name.o),makefile.name,append = TRUE)
  compile.line <- paste("\t","clang++ -o",makefile.name,"${COMMON_FLAGS}")
 obj.file.path <-gsub(" ","",paste("/home/akhila/R/",package_name,"/src/*.o"))
 write(paste(compile.line,obj.file.path),makefile.name,append = TRUE)
 write(paste("./",makefile.name,"--fuzz"),makefile.name,append = TRUE)
 write(paste(makefile.name.o,":",makefile.name.cpp),makefile.name,append = TRUE)
 write(paste("\t","clang++ -I${R_HOME}/include
-I/home/akhila/deepstate/src/include 
-I/usr/lib/R/site-library/Rcpp/include 
-I/usr/lib/R/site-library/RInside/include 
-I/home/akhila/R/RcppDeepState/inst/include/", 
makefile.name.cpp,"-o",makefile.name.o,"-c"),makefile.name,append = TRUE)
}

create_makefile("binsegRcpp","findme")



  

