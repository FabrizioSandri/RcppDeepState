error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
" ",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt
source('~/Desktop/errorrcode.R')
source('~/Desktop/errorrcode.R')
error.dt <- nc::capture_all_str(
"use_after_deallocate_log",
"==[0-9]+==ERROR: ",
sanitizer=".*?",
": ",
error.type=".*?",
" ",
error.details=".*",
"\n",
trace="(?:.*\n)*?",
"SUMMARY")
error.dt <- nc::capture_all_str(
"use_after_deallocate_log",
"==[0-9]+==ERROR: ",
sanitizer=".*?",
": ",
error.type=".*?",
" ",
error.details=".*",
"\n",
trace="(?:.*\n)*?",
"SUMMARY")
error.dt <- nc::capture_all_str(
"use_after_deallocate_log",
"==[0-9]+==ERROR: ",
sanitizer=".*?",
": ",
error.type=".*?",
" ",
error.details=".*",
"\n",
trace="(?:.*\n)*?",
"SUMMARY")
error.dt <- nc::capture_all_str(
"use_after_deallocate_log",
"==[0-9]+==ERROR: ",
sanitizer=".*?",
": ",
error.type=".*?",
" ",
error.details=".*",
"\n",
trace="(?:.*\n)*?",
"SUMMARY")
error.dt <- nc::capture_all_str(
"use_after_deallocate_log",
"==[0-9]+==ERROR: ",
sanitizer=".*?",
": ",
error.type=".*?",
" ",
error.details=".*",
"\n",
trace="(?:.*\n)*?",
"SUMMARY")
error.dt
error.dt[, error.i := 1:.N]
error.dt
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
one.trace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl("/src/", file.line), paste(file.line, collapse="\n")]
}, by=error.i]
count.dt <- error.dt[, .(
count=.N
), by=.(sanitizer, error.type, src.file.lines)]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
one.trace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl("/src/", file.line), paste(file.line, collapse="\n")]
}, by=error.i]
count.dt <- error.dt[, .(
count=.N
), by=.(sanitizer, error.type, src.file.lines)]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
one.trace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl("/src/", file.line), paste(file.line, collapse="\n")]
}, by=error.i]
count.dt <- error.dt[, .(
count=.N
), by=.(sanitizer, error.type, src.file.lines)]
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
trace,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl("/src/", file.line), paste(file.line, collapse="\n")]
}, by=error.i]
count.dt <- error.dt[, .(
count=.N
), by=.(sanitizer, error.type, src.file.lines)]
error.dt
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
error.dt[, error.i := 1:.N]
error.dt
error.dt[, src.file.lines := {
file.line.dt <- nc::capture_all_str(
heapsum,
file.line="[^ ]+?:[0-9]+")
file.line.dt[grepl("/src/", file.line), paste(file.line, collapse="\n")]
}, by=error.i]
error.dt
source('~/Desktop/errorrcode.R')
source('~/Desktop/errorrcode.R')
error.dt <- nc::capture_all_str(
"loparttest",
"ERROR: ",
state=".*",
input="(?:.*\n)*?",
"==[0-9]+== HEAP SUMMARY:",
"\n",
heapsum="(?:.*\n)*?",
"==[0-9]+== LEAK SUMMARY:",
"\n",
leaksum="(?:.*\n)*?",
"==[0-9]+== ERROR SUMMARY:")
load("~/R/RcppDeepState/inst/include/.RData")
source('~/Desktop/errorrcode.R')
source('~/Desktop/errorrcode.R')
source('~/Desktop/errorrcode.R')
user.display <- user_error_display("use_after_deallocate_log")
testUBSAN::rcpp_use_after_deallocate()
testUBSAN::rcpp_use_after_deallocate(50)
testUBSAN::rcpp_use_after_deallocate(60)
testUBSAN::rcpp_use_after_deallocate(900)
testUBSAN::rcpp_use_after_deallocate(865)
testUBSAN::rcpp_use_after_deallocate(5)
testUBSAN::rcpp_use_after_deallocate(2)
testUBSAN::rcpp_use_after_deallocate(0)
testUBSAN::rcpp_use_after_free(10)
testUBSAN::rcpp_use_after_free(60)
testUBSAN::rcpp_use_after_free(7)
testUBSAN::rcpp_use_after_free(0)
testUBSAN::rcpp_use_after_free(63)
library(testthat)
expect_gt(100,0)
testUBSAN::rcpp_zero_sized_array(60)
testUBSAN::rcpp_zero_sized_array(50)
testUBSAN::rcpp_zero_sized_array(605)
testUBSAN::rcpp_use_after_deallocate(2)
testUBSAN::rcpp_use_after_deallocate(100)
testUBSAN::rcpp_read_out_of_bound(20)
testUBSAN::rcpp_read_out_of_bound(50)
testUBSAN::rcpp_read_out_of_bound(10)
typeof(-1258261132)
typeof(-1292955232)
typeof(13)
expect_type((-1292955232,double)
expect_type(-1292955232,double)
?expect_type
devtools::document()
devtools::document()
devtools::document()
devtools::document()
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
getwd()
functions.list  <- get_function_body("inst/testpkgs/binsegRcpp")
functions.list
dhc<-deep_harness_compile_run("~/R/binsegRcpp")
deep_harness_compile_run <- function(package_name){
functions.list  <- get_function_body(package_name)
fun_names <- unique(functions.list$funName)
for(f in fun_names){
functions.rows  <- functions.list[functions.list$funName == f,]
makefilepath <- paste0("/inst/RcppDeepState/")
#Sys.glob(file.path(package_name,"inst","include"))
fun <-gsub("rcpp_","",f)
compile_line <-paste0("rm -f *.o && make -f ",makefilepath,fun,
".Makefile "
)
print(compile_line)
system(compile_line)
}
return("code compiled")
}
dhc<-deep_harness_compile_run("~/R/binsegRcpp")
getwd()
dhc<-deep_harness_compile_run("~/R/binsegRcpp")
deep_harness_compile_run <- function(package_name){
functions.list  <- get_function_body(package_name)
fun_names <- unique(functions.list$funName)
for(f in fun_names){
functions.rows  <- functions.list[functions.list$funName == f,]
makefilepath <- paste0("inst/RcppDeepState/")
#Sys.glob(file.path(package_name,"inst","include"))
fun <-gsub("rcpp_","",f)
compile_line <-paste0("rm -f *.o && make -f ",makefilepath,fun,
".Makefile "
)
print(compile_line)
system(compile_line)
}
return("code compiled")
}
dhc<-deep_harness_compile_run("~/R/binsegRcpp")
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
functions.list  <- get_package_details("inst/testpkgs/binsegRcpp")
functions.list
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
getwd
getwd()
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
dhc<-deep_harness_compile_run("RcppDeepState/inst/testpkgs/binsegRcpp")
library(here)
install.packages("here")
deep_harness_compile_run <- function(package_name){
functions.list  <- get_function_body(package_name)
fun_names <- unique(functions.list$funName)
for(f in fun_names){
functions.rows  <- functions.list[functions.list$funName == f,]
makefilepath <- here("inst/RcppDeepState/")
#Sys.glob(file.path(package_name,"inst","include"))
fun <-gsub("rcpp_","",f)
compile_line <-paste0("rm -f *.o && make -f ",makefilepath,fun,
".Makefile "
)
print(compile_line)
system(compile_line)
}
return("code compiled")
}
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
deep_harness_compile_run <- function(package_name){
functions.list  <- get_function_body(package_name)
fun_names <- unique(functions.list$funName)
for(f in fun_names){
functions.rows  <- functions.list[functions.list$funName == f,]
makefilepath <- here::here("inst/RcppDeepState/")
#Sys.glob(file.path(package_name,"inst","include"))
fun <-gsub("rcpp_","",f)
compile_line <-paste0("rm -f *.o && make -f ",makefilepath,fun,
".Makefile "
)
print(compile_line)
system(compile_line)
}
return("code compiled")
}
dhc<-deep_harness_compile_run("inst/testpkgs/binsegRcpp")
deep_harness_compile_run <- function(package_name){
functions.list  <- get_function_body(package_name)
fun_names <- unique(functions.list$funName)
for(f in fun_names){
functions.rows  <- functions.list[functions.list$funName == f,]
makefilepath <- here::here("inst/RcppDeepState/")
#Sys.glob(file.path(package_name,"inst","include"))
fun <-gsub("rcpp_","",f)
compile_line <-paste0("rm -f *.o && make -f ",here::here("inst/RcppDeepState/"),fun,
".Makefile "
)
print(compile_line)
system(compile_line)
}
return("code compiled")
}
deep_harness_compile_run <- function(package_name){
functions.list  <- get_function_body(package_name)
fun_names <- unique(functions.list$funName)
for(f in fun_names){
functions.rows  <- functions.list[functions.list$funName == f,]
makefilepath <- here::here("inst/RcppDeepState/")
#Sys.glob(file.path(package_name,"inst","include"))
fun <-gsub("rcpp_","",f)
compile_line <-paste0("rm -f *.o && make -f ",here::here("inst/RcppDeepState/"),fun,
".Makefile "
)
print(compile_line)
system(compile_line)
}
return("code compiled")
}
library(RcppDeepState)
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
library(RcppDeepState)
library(RcppDeepState)
here::here()
dhc<-deep_harness_compile_run(cat(readLines(here::here("/inst/include/testpkgs/binsegRcpp/src/RcppExports.cpp")))
)
here::here("RcppDeepState/inst/include/testpkgs/binsegRcpp")
here::here("inst/include/testpkgs/binsegRcpp")
