write_to_file<-paste(write_to_file,flags,"\n")
write_to_file<-paste0(write_to_file,"\n",test_harness," : ",makefile.name.o,"\n")
compile.line <- paste("\t","clang++ -o",test_harness,"${COMMON_FLAGS}")
obj.file.path<-gsub(" ","",paste0(package,"/src/*.o"))
write_to_file<-paste(write_to_file,compile.line,obj.file.path,"\n")
write_to_file<-paste0(write_to_file,"\t","valgrind --tool=memcheck --leak-check=yes ","./",test_harness," --fuzz"," > ","/home/",p$val,"testfiles","/",p$packagename,"/",fun_name,"_log ","2>&1"	,"\n")
write_to_file<-paste(write_to_file,makefile.name.o,":",system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState"),"\n")
write_to_file<-paste0(write_to_file,"\t","clang++ -I${R_HOME}/include -I/usr/lib/R/site-library/Rcpp/include -I/usr/lib/R/site-library/RInside/include"," -I",system.file("include",package="RcppDeepState")," ",
system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState")," -o ",makefile.name.o," -c")
write(write_to_file,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",makefile.name),append=TRUE)
}
#deep_harness_analyze_one("rcpp_binseg_normal","6d332a405389934d1a0bb64728ae4c3a96ec12c6.pass")
#deep_harness_compile_run("~/R/binsegRcpp")
#deep_harness_save_passing_tests("~/R/binsegRcpp")
globalVariables(c("argument.name","funName","argument.type","calls"
,"code","funName",".","error.i","src.file.lines",
"heapsum","file.line","arg.name","value",":=",".N","f","fun_name","read.table"))
library(testthat)
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
fun_names
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
list[[i]] <- function_name.i
i = i + 1
}
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- function_name.i
i = i + 1
}
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
harnessfiles.list
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- function_name.i
i = i + 1
}
return(harnessfiles.list)
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0(function_name.i,"_DeepState_TestHarness"))
i = i + 1
}
return(harnessfiles.list)
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0(function_name.i,"_DeepState_TestHarness.cpp"))
i = i + 1
}
return(harnessfiles.list)
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0(function_name.i,"_DeepState_TestHarness.cpp"))
makefiles.list[[i]] <-  gsub("rcpp_","",paste0(function_name.i,".Makefile"))
i = i + 1
}
return(harnessfiles.list)
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0(function_name.i,"_DeepState_TestHarness.cpp"))
makefiles.list[[i]] <-  gsub("rcpp_","",paste0(function_name.i,".Makefile"))
i = i + 1
}
return(harnessfiles.list,makefiles.list)
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0(function_name.i,"_DeepState_TestHarness.cpp"))
makefiles.list[[i]] <-  gsub("rcpp_","",paste0(function_name.i,".Makefile"))
i = i + 1
}
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
harnessfiles.list
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0(function_name.i,"_DeepState_TestHarness.cpp"))
makefiles.list[[i]] <-  gsub("rcpp_","",paste0(function_name.i,".Makefile"))
i = i + 1
}
return(c(harnessfiles.list,makefiles.list))
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harnessfiles.list
harness_files(path)
p <- nc::capture_all_str(package_name,val=".+/",folder=".+/",packagename=".*")
p <- nc::capture_all_str(path,val=".+/",folder=".+/",packagename=".*")
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
p <- nc::capture_all_str(gsub("/home/","",path),val=".+/",folder=".+/",packagename=".*")
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0("/home/",p$val,"testfiles",p$packagename,function_name.i,"_DeepState_TestHarness.cpp"))
makefiles.list[[i]] <-  gsub("rcpp_","",paste0(function_name.i,".Makefile"))
i = i + 1
}
return(c(harnessfiles.list,makefiles.list))
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
##' @title  creates list of files and path for given functions in package
##' @param path to the package test file
##' @export
harness_files <- function(path){
functions.list <- get_function_body(path)
p <- nc::capture_all_str(gsub("/home/","",path),val=".+/",folder=".+/",packagename=".*")
fun_names <- unique(functions.list$funName)
harnessfiles.list = list()
makefiles.list=list()
i<-1
for(function_name.i in fun_names){
filepaths<-paste0("/home/",p$val,"testfiles/",p$packagename,"/")
harnessfiles.list[[i]] <- gsub("rcpp_","",paste0(filepaths,function_name.i,"_DeepState_TestHarness.cpp"))
makefiles.list[[i]] <-  gsub("rcpp_","",paste0(filepaths,function_name.i,".Makefile"))
i = i + 1
}
return(c(harnessfiles.list,makefiles.list))
}
path <- system.file("testpkgs/binsegRcpp", package = "RcppDeepState")
harness_files(path)
harness_files[0]
ps<-harness_files(path)
ps[0]
ps[1]
ps[2]
ps[3]
ps[4]
system.file("binseg_normal.Makefile",package = "RcppDeepState")
devtools::load_all()
system.file("binseg_normal.Makefile",package = "RcppDeepState")
system.file("testfiles/binseg_normal.Makefile",package = "RcppDeepState")
res <- file.exists(files.list[0])
files.list<-harness_files(path)
res <- file.exists(files.list[0])
devtools::document
devtools::document()
path <- system.file("testpkgs/testSAN", package = "RcppDeepState")
files.list<-harness_files(path)
files.list
##' @title  creates testharness for given functions in package
##' @param package_name to the RcppExports file
##' @export
deepstate_pkg_create<-function(package_name){
functions.list <- get_function_body(package_name)
prototypes_calls <-get_prototype_calls(package_name)
p <- nc::capture_all_str(gsub("/home/","",package_name),val=".+/",folder=".+/",packagename=".*")
in_package <- paste("RcppDeepState")
dir.create(paste0("/home/",p$val,"testfiles","/",p$packagename), showWarnings = FALSE)
includes <- "#include <deepstate/DeepState.hpp>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <fstream>"
fun_names <- unique(functions.list$funName)
for(function_name.i in fun_names){
write_to_file <- ""
functions.rows  <- functions.list [functions.list$funName == function_name.i,]
pt <- prototypes_calls[prototypes_calls$funName == function_name.i,]
fun_name <-gsub("rcpp_","",function_name.i)
filename <-paste0(fun_name,"_DeepState_TestHarness",".cpp")
file.create(paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename), recursive=TRUE)
write(includes,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename),append = TRUE)
write_to_file <-paste(write_to_file,pt[1,pt$prototype])
testname<-paste(function_name.i,"_test",sep="")
unittest<-gsub(" ","",paste(fun_name,"_random_datatypes"))
write_to_file <- paste0(write_to_file,"\n","TEST(",unittest,",",testname,")","{","\n")
#obj <-gsub( "\\s+", " " ,paste(in_package,tolower(in_package),";","\n"))
#write(obj,filename,append = TRUE)
for(filestream.j in 1:nrow( functions.rows )){
write_to_file<-paste0(write_to_file,"std::ofstream ", functions.rows[filestream.j,argument.name],"_stream",";\n")
}
write_to_file<-paste(write_to_file,"RInside());\n")
create_makefile(package_name,fun_name)
for(argument.i in 1:nrow(functions.rows)){
variable <- gsub( "\\s+", " " ,paste( functions.rows [argument.i,argument.type],
functions.rows [argument.i,argument.name]))
variable <- gsub("const","",variable)
name <- (gsub("const Rcpp::","", functions.rows[argument.i,argument.type]))
st_val <- paste0("= ","RcppDeepState_",(name),"()",";\n")
file_open <- gsub("# ","\"",paste0( functions.rows [argument.i,argument.name],"_stream.open(#", functions.rows [argument.i,argument.name],"# );","\n",
functions.rows [argument.i,argument.name],"_stream<<", functions.rows [argument.i,argument.name],";","\n",
functions.rows [argument.i,argument.name],"_stream.close();","\n"))
write_to_file <-paste(write_to_file,variable,st_val,file_open)
}
write_to_file<-paste(write_to_file,"try{\n", sub("\\)","",sub("\\(","",pt[1,calls])))
write_to_file<-gsub("#","\"",paste0(write_to_file,"\n","}\n","catch(Rcpp::exception& e){\n","std::cout<<#Exception Handled#<<std::endl;\n}"))
write_to_file<-paste(write_to_file,"\n","}")
write(write_to_file,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename),append=TRUE)
}
return ("Testharness created!!")
}
#deepstate_pkg_create("~/R/binsegRcpp")
##' @title  creates makefiles for above created testharness in package
##' @param package to the RcppExports file
##' @param fun_name name of function to get makefile
##' @export
create_makefile <-function(package,fun_name){
p <- nc::capture_all_str(gsub("/home/","",package),val=".+/",folder=".+/",packagename=".*")
write_to_file <- ""
makefile.name <- gsub("rcpp_","",paste0(fun_name,".Makefile"))
test_harness <- gsub("rcpp_","",paste0(fun_name,"_DeepState_TestHarness"))
makefile.name.o <-paste0(test_harness,".o")
makefile.name.cpp <-paste0(test_harness,".cpp")
file.create(paste0("/home/",p$val,"testfiles","/",p$packagename,"/",makefile.name), recursive=TRUE)
path <-paste("R_HOME=",R.home())
write_to_file<-paste0(write_to_file,path,"\n")
flags <- paste0("COMMON_FLAGS = ",makefile.name.o," -I",system.file("include",package="RcppDeepState")," -L/usr/local/lib/R/site-library/RInside/lib -Wl,-rpath=/usr/local/lib/R/site-library/RInside/lib -L${R_HOME}/lib -Wl,-rpath=${R_HOME}/lib"," -L",system.file("/include/deepstate",package="RcppDeepState")," -Wl,-rpath=",system.file("/include/deepstate",package="RcppDeepState")," -lR -lRInside -ldeepstate")
write_to_file<-paste(write_to_file,flags,"\n")
write_to_file<-paste0(write_to_file,"\n",test_harness," : ",makefile.name.o,"\n")
compile.line <- paste("\t","clang++ -o",test_harness,"${COMMON_FLAGS}")
obj.file.path<-gsub(" ","",paste0(package,"/src/*.o"))
write_to_file<-paste(write_to_file,compile.line,obj.file.path,"\n")
write_to_file<-paste0(write_to_file,"\t","valgrind --tool=memcheck --leak-check=yes ","./",test_harness," --fuzz"," > ","/home/",p$val,"testfiles","/",p$packagename,"/",fun_name,"_log ","2>&1"	,"\n")
write_to_file<-paste(write_to_file,makefile.name.o,":",system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState"),"\n")
write_to_file<-paste0(write_to_file,"\t","clang++ -I${R_HOME}/include -I/usr/lib/R/site-library/Rcpp/include -I/usr/lib/R/site-library/RInside/include"," -I",system.file("include",package="RcppDeepState")," ",
system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState")," -o ",makefile.name.o," -c")
write(write_to_file,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",makefile.name),append=TRUE)
}
#deep_harness_analyze_one("rcpp_binseg_normal","6d332a405389934d1a0bb64728ae4c3a96ec12c6.pass")
#deep_harness_compile_run("~/R/binsegRcpp")
#deep_harness_save_passing_tests("~/R/binsegRcpp")
globalVariables(c("argument.name","funName","argument.type","calls"
,"code","funName",".","error.i","src.file.lines",
"heapsum","file.line","arg.name","value",":=",".N","f","fun_name","read.table"))
##' @title  creates testharness for given functions in package
##' @param package_name to the RcppExports file
##' @export
deepstate_pkg_create<-function(package_name){
functions.list <- get_function_body(package_name)
prototypes_calls <-get_prototype_calls(package_name)
p <- nc::capture_all_str(gsub("/home/","",package_name),val=".+/",folder=".+/",packagename=".*")
in_package <- paste("RcppDeepState")
dir.create(paste0("/home/",p$val,"testfiles","/",p$packagename), showWarnings = FALSE)
includes <- "#include <deepstate/DeepState.hpp>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <fstream>"
fun_names <- unique(functions.list$funName)
for(function_name.i in fun_names){
write_to_file <- ""
functions.rows  <- functions.list [functions.list$funName == function_name.i,]
pt <- prototypes_calls[prototypes_calls$funName == function_name.i,]
fun_name <-gsub("rcpp_","",function_name.i)
filename <-paste0(fun_name,"_DeepState_TestHarness",".cpp")
file.create(paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename), recursive=TRUE)
write(includes,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename),append = TRUE)
write_to_file <-paste(write_to_file,pt[1,pt$prototype])
testname<-paste(function_name.i,"_test",sep="")
unittest<-gsub(" ","",paste(fun_name,"_random_datatypes"))
write_to_file <- paste0(write_to_file,"\n","TEST(",unittest,",",testname,")","{","\n")
#obj <-gsub( "\\s+", " " ,paste(in_package,tolower(in_package),";","\n"))
#write(obj,filename,append = TRUE)
for(filestream.j in 1:nrow( functions.rows )){
write_to_file<-paste0(write_to_file,"std::ofstream ", functions.rows[filestream.j,argument.name],"_stream",";\n")
}
write_to_file<-paste(write_to_file,"RInside();\n")
create_makefile(package_name,fun_name)
for(argument.i in 1:nrow(functions.rows)){
variable <- gsub( "\\s+", " " ,paste( functions.rows [argument.i,argument.type],
functions.rows [argument.i,argument.name]))
variable <- gsub("const","",variable)
name <- (gsub("const Rcpp::","", functions.rows[argument.i,argument.type]))
st_val <- paste0("= ","RcppDeepState_",(name),"()",";\n")
file_open <- gsub("# ","\"",paste0( functions.rows [argument.i,argument.name],"_stream.open(#", functions.rows [argument.i,argument.name],"# );","\n",
functions.rows [argument.i,argument.name],"_stream<<", functions.rows [argument.i,argument.name],";","\n",
functions.rows [argument.i,argument.name],"_stream.close();","\n"))
write_to_file <-paste(write_to_file,variable,st_val,file_open)
}
write_to_file<-paste(write_to_file,"try{\n", sub("\\)","",sub("\\(","",pt[1,calls])))
write_to_file<-gsub("#","\"",paste0(write_to_file,"\n","}\n","catch(Rcpp::exception& e){\n","std::cout<<#Exception Handled#<<std::endl;\n}"))
write_to_file<-paste(write_to_file,"\n","}")
write(write_to_file,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename),append=TRUE)
}
return ("Testharness created!!")
}
#deepstate_pkg_create("~/R/binsegRcpp")
##' @title  creates makefiles for above created testharness in package
##' @param package to the RcppExports file
##' @param fun_name name of function to get makefile
##' @export
create_makefile <-function(package,fun_name){
p <- nc::capture_all_str(gsub("/home/","",package),val=".+/",folder=".+/",packagename=".*")
write_to_file <- ""
makefile.name <- gsub("rcpp_","",paste0(fun_name,".Makefile"))
test_harness <- gsub("rcpp_","",paste0(fun_name,"_DeepState_TestHarness"))
makefile.name.o <-paste0(test_harness,".o")
makefile.name.cpp <-paste0(test_harness,".cpp")
file.create(paste0("/home/",p$val,"testfiles","/",p$packagename,"/",makefile.name), recursive=TRUE)
path <-paste("R_HOME=",R.home())
write_to_file<-paste0(write_to_file,path,"\n")
flags <- paste0("COMMON_FLAGS = ",makefile.name.o," -I",system.file("include",package="RcppDeepState")," -L/usr/local/lib/R/site-library/RInside/lib -Wl,-rpath=/usr/local/lib/R/site-library/RInside/lib -L${R_HOME}/lib -Wl,-rpath=${R_HOME}/lib"," -L",system.file("/include/deepstate",package="RcppDeepState")," -Wl,-rpath=",system.file("/include/deepstate",package="RcppDeepState")," -lR -lRInside -ldeepstate")
write_to_file<-paste(write_to_file,flags,"\n")
write_to_file<-paste0(write_to_file,"\n",test_harness," : ",makefile.name.o)
compile.line <- paste("\n\t","clang++ -o",test_harness,"${COMMON_FLAGS}")
obj.file.path<-gsub(" ","",paste0(package,"/src/*.o"))
write_to_file<-paste(write_to_file,compile.line,obj.file.path)
write_to_file<-paste0(write_to_file,"\n\t","valgrind --tool=memcheck --leak-check=yes ","./",test_harness," --fuzz --fuzz_save_passing --output_test_dir","/home/",p$val,"testfiles","/",p$packagename,"/",fun_name,"_output"," > ","/home/",p$val,"testfiles","/",p$packagename,"/",fun_name,"_log ","2>&1","\n")
write_to_file<-paste(write_to_file,makefile.name.o,":",system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState"))
write_to_file<-paste0(write_to_file,"\n\t","clang++ -I${R_HOME}/include -I/usr/lib/R/site-library/Rcpp/include -I/usr/lib/R/site-library/RInside/include"," -I",system.file("include",package="RcppDeepState")," ",
system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState")," -o ",makefile.name.o," -c")
write(write_to_file,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",makefile.name),append=TRUE)
}
#deep_harness_analyze_one("rcpp_binseg_normal","6d332a405389934d1a0bb64728ae4c3a96ec12c6.pass")
#deep_harness_compile_run("~/R/binsegRcpp")
#deep_harness_save_passing_tests("~/R/binsegRcpp")
globalVariables(c("argument.name","funName","argument.type","calls"
,"code","funName",".","error.i","src.file.lines",
"heapsum","file.line","arg.name","value",":=",".N","f","fun_name","read.table"))
##' @title  creates testharness for given functions in package
##' @param package_name to the RcppExports file
##' @export
deepstate_pkg_create<-function(package_name){
functions.list <- get_function_body(package_name)
prototypes_calls <-get_prototype_calls(package_name)
p <- nc::capture_all_str(gsub("/home/","",package_name),val=".+/",folder=".+/",packagename=".*")
in_package <- paste("RcppDeepState")
dir.create(paste0("/home/",p$val,"testfiles","/",p$packagename), showWarnings = FALSE)
includes <- "#include <deepstate/DeepState.hpp>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <fstream>"
fun_names <- unique(functions.list$funName)
for(function_name.i in fun_names){
write_to_file <- ""
functions.rows  <- functions.list [functions.list$funName == function_name.i,]
pt <- prototypes_calls[prototypes_calls$funName == function_name.i,]
fun_name <-gsub("rcpp_","",function_name.i)
filename <-paste0(fun_name,"_DeepState_TestHarness",".cpp")
file.create(paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename), recursive=TRUE)
write(includes,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename),append = TRUE)
write_to_file <-paste(write_to_file,pt[1,pt$prototype])
testname<-paste(function_name.i,"_test",sep="")
unittest<-gsub(" ","",paste(fun_name,"_random_datatypes"))
write_to_file <- paste0(write_to_file,"\n","TEST(",unittest,",",testname,")","{","\n")
#obj <-gsub( "\\s+", " " ,paste(in_package,tolower(in_package),";","\n"))
#write(obj,filename,append = TRUE)
for(filestream.j in 1:nrow( functions.rows )){
write_to_file<-paste0(write_to_file,"std::ofstream ", functions.rows[filestream.j,argument.name],"_stream",";\n")
}
write_to_file<-paste(write_to_file,"RInside();\n")
create_makefile(package_name,fun_name)
for(argument.i in 1:nrow(functions.rows)){
variable <- gsub( "\\s+", " " ,paste( functions.rows [argument.i,argument.type],
functions.rows [argument.i,argument.name]))
variable <- gsub("const","",variable)
name <- (gsub("const Rcpp::","", functions.rows[argument.i,argument.type]))
st_val <- paste0("= ","RcppDeepState_",(name),"()",";\n")
file_open <- gsub("# ","\"",paste0( functions.rows [argument.i,argument.name],"_stream.open(#", functions.rows [argument.i,argument.name],"# );","\n",
functions.rows [argument.i,argument.name],"_stream<<", functions.rows [argument.i,argument.name],";","\n",
functions.rows [argument.i,argument.name],"_stream.close();","\n"))
write_to_file <-paste(write_to_file,variable,st_val,file_open)
}
write_to_file<-paste(write_to_file,"try{\n", sub("\\)","",sub("\\(","",pt[1,calls])))
write_to_file<-gsub("#","\"",paste0(write_to_file,"\n","}\n","catch(Rcpp::exception& e){\n","std::cout<<#Exception Handled#<<std::endl;\n}"))
write_to_file<-paste(write_to_file,"\n","}")
write(write_to_file,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",filename),append=TRUE)
}
return ("Testharness created!!")
}
#deepstate_pkg_create("~/R/binsegRcpp")
##' @title  creates makefiles for above created testharness in package
##' @param package to the RcppExports file
##' @param fun_name name of function to get makefile
##' @export
create_makefile <-function(package,fun_name){
p <- nc::capture_all_str(gsub("/home/","",package),val=".+/",folder=".+/",packagename=".*")
write_to_file <- ""
makefile.name <- gsub("rcpp_","",paste0(fun_name,".Makefile"))
test_harness <- gsub("rcpp_","",paste0(fun_name,"_DeepState_TestHarness"))
makefile.name.o <-paste0(test_harness,".o")
makefile.name.cpp <-paste0(test_harness,".cpp")
file.create(paste0("/home/",p$val,"testfiles","/",p$packagename,"/",makefile.name), recursive=TRUE)
path <-paste("R_HOME=",R.home())
write_to_file<-paste0(write_to_file,path,"\n")
flags <- paste0("COMMON_FLAGS = ",makefile.name.o," -I",system.file("include",package="RcppDeepState")," -L/usr/local/lib/R/site-library/RInside/lib -Wl,-rpath=/usr/local/lib/R/site-library/RInside/lib -L${R_HOME}/lib -Wl,-rpath=${R_HOME}/lib"," -L",system.file("/include/deepstate",package="RcppDeepState")," -Wl,-rpath=",system.file("/include/deepstate",package="RcppDeepState")," -lR -lRInside -ldeepstate")
write_to_file<-paste(write_to_file,flags,"\n")
write_to_file<-paste0(write_to_file,"\n",test_harness," : ",makefile.name.o)
compile.line <- paste("\n\t","clang++ -o",test_harness,"${COMMON_FLAGS}")
obj.file.path<-gsub(" ","",paste0(package,"/src/*.o"))
write_to_file<-paste(write_to_file,compile.line,obj.file.path)
write_to_file<-paste0(write_to_file,"\n\t","valgrind --tool=memcheck --leak-check=yes ","./",test_harness," --fuzz --fuzz_save_passing --output_test_dir","/home/",p$val,"testfiles","/",p$packagename,"/",fun_name,"_output"," > ","/home/",p$val,"testfiles","/",p$packagename,"/",fun_name,"_log ","2>&1")
write_to_file<-paste(write_to_file,"\n",makefile.name.o,":",system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState"))
write_to_file<-paste0(write_to_file,"\n\t","clang++ -I${R_HOME}/include -I/usr/lib/R/site-library/Rcpp/include -I/usr/lib/R/site-library/RInside/include"," -I",system.file("include",package="RcppDeepState")," ",
system.file(paste0("testfiles/",p$packagename,"/",makefile.name.cpp),package="RcppDeepState")," -o ",makefile.name.o," -c")
write(write_to_file,paste0("/home/",p$val,"testfiles","/",p$packagename,"/",makefile.name),append=TRUE)
}
#deep_harness_analyze_one("rcpp_binseg_normal","6d332a405389934d1a0bb64728ae4c3a96ec12c6.pass")
#deep_harness_compile_run("~/R/binsegRcpp")
#deep_harness_save_passing_tests("~/R/binsegRcpp")
globalVariables(c("argument.name","funName","argument.type","calls"
,"code","funName",".","error.i","src.file.lines",
"heapsum","file.line","arg.name","value",":=",".N","f","fun_name","read.table"))
##' @title compiles the code for created testharness in package
##' @param package_name to the RcppExports file
##' @export
deep_harness_compile_run <- function(package_name){
functions.list  <- get_function_body(package_name)
fun_names <- unique(functions.list$funName)
val = 0
for(f in fun_names){
functions.rows  <- functions.list[functions.list$funName == f,]
makefilepath <- system.file("RcppDeepStatefiles/testUBSAN/", package = "RcppDeepState")
#("R/RcppDeepState/inst/RcppDeepState/testUBSAN/")
#Sys.glob(file.path(package_name,"inst","include"))here::here("R/RcppDeepState/inst/RcppDeepState/testUBSAN/")
fun <-gsub("rcpp_","",f)
compile_line <-paste0("rm -f *.o && make -f ",
system.file("testfiles/testSAN/", package = "RcppDeepState"),"/",fun,
".Makefile "
)
print(compile_line)
#system(compile_line)
if(system(compile_line) == 0)val=val+1
}
if(val == length(fun_names))
return("code compiled")
else
return("code did not compile")
}
